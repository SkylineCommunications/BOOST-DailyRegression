name: Run And Monitor

on:
  workflow_call:
    inputs:
      workflow-name:
        required: true
        type: string
      ref:
        required: false
        type: string
        default: 'main'
      title:
        required: true
        type: string
    secrets:
      msteams-webhook:
        required: true

jobs:
  run-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger workflow
        uses: benc-uk/workflow-dispatch@v1
        id: trigger
        with:
          workflow: ${{ inputs.workflow-name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ inputs.ref }}

      - name: Wait for a short delay before checking the status
        run: |
          echo "Sleeping for 15 seconds to ensure workflow is registered..."
          sleep 15

      - name: Wait for workflow to complete
        uses: actions/github-script@v6
        id: wait_for_completion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            const workflowRuns = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: '${{ steps.trigger.outputs.workflowId }}',
            });

            const run = workflowRuns.data.workflow_runs.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0];
            const runId = run.id;
            const runUrl = run.html_url;

            let status = run.status;
            let conclusion = run.conclusion;
            let details = `${{ inputs.title }}\n\n`;

            const startTime = new Date().getTime();
            const timeout = 3600000; // 1 hour in ms

            while (status !== 'completed') {
              if (new Date().getTime() - startTime > timeout) {
                details += "!! Secondary workflow did not finish in time !!\n\n";
                core.setFailed("Timeout: Secondary workflow did not finish in time.");
                break;
              }

              await new Promise(r => setTimeout(r, 10000));
              const check = await github.rest.actions.getWorkflowRun({ owner, repo, run_id: runId });
              status = check.data.status;
              conclusion = check.data.conclusion;
            }

            let failedJobs = [];

            if (conclusion !== 'success') {
              const jobs = await github.rest.actions.listJobsForWorkflowRun({
                owner,
                repo,
                run_id: runId
              });

              for (const job of jobs.data.jobs) {
                if (job.conclusion === 'failure') {
                  failedJobs.push(`Job: ${job.name}`);
                  for (const step of job.steps) {
                    if (step.conclusion === 'failure') {
                      failedJobs.push(`  - Step: ${step.name}`);
                    }
                  }
                }
              }

              details += failedJobs.join('\n');
            } else {
              details += "No failures detected.";
            }

            core.setOutput("run_url", runUrl);
            core.setOutput("details", details);

            if (conclusion !== 'success') {
              core.setFailed(`Secondary workflow failed. Details: ${runUrl}`);
            }

      - name: Notify via Teams
        if: failure()
        run: |
          dotnet tool install -g Skyline.DataMiner.CICD.Tools.MSTeamsWorkflowWebhookCard

          webhook-to-teams from-cicd \
            --name "${{ github.repository }}" \
            --http-post-url "${{ secrets.msteams-webhook }}" \
            --result Failure \
            --url-to-build "${{ steps.wait_for_completion.outputs.run_url }}" \
            --details "${{ steps.wait_for_completion.outputs.details }}"